# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  userName: String!
  passWord: String!
  firstName: String!
  lastName: String!
  created: DateTime!
  posts(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): UserPostsConnection!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input PostFilter {
  and: [PostFilter!]
  or: [PostFilter!]
  id: StringFieldComparison
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input PostSort {
  field: PostSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PostSortFields {
  id
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Post {
  id: String!
  title: String!
  body: String!
  owner: Post!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type PostDeleteResponse {
  id: String
  title: String
  body: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type PostEdge {
  """The node containing the Post"""
  node: Post!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type PostConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PostEdge!]!
}

type PostAggregateGroupBy {
  id: String
}

type PostCountAggregate {
  id: Int
}

type PostMinAggregate {
  id: String
}

type PostMaxAggregate {
  id: String
}

type UserDeleteResponse {
  id: ID
  userName: String
  passWord: String
  firstName: String
  lastName: String
  created: DateTime
}

type UserEdge {
  """The node containing the User"""
  node: User!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type UserConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [UserEdge!]!
}

type UserAggregateGroupBy {
  id: ID
}

type UserCountAggregate {
  id: Int
}

type UserMinAggregate {
  id: ID
}

type UserMaxAggregate {
  id: ID
}

type UserPostsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PostEdge!]!
}

type Query {
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
  post(
    """The id of the record to find."""
    id: String!
  ): Post
  posts(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): PostConnection!
}

input UserFilter {
  and: [UserFilter!]
  or: [UserFilter!]
  id: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input UserSort {
  field: UserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserSortFields {
  id
}

type Mutation {
  addPostsToUser(input: AddPostsToUserInput!): User!
  setPostsOnUser(input: SetPostsOnUserInput!): User!
  createOneUser(input: CreateOneUserInput!): User!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  setOwnerOnPost(input: SetOwnerOnPostInput!): Post!
  createOnePost(input: CreateOnePostInput!): Post!
  createManyPosts(input: CreateManyPostsInput!): [Post!]!
  updateOnePost(input: UpdateOnePostInput!): Post!
  updateManyPosts(input: UpdateManyPostsInput!): UpdateManyResponse!
  deleteOnePost(input: DeleteOnePostInput!): PostDeleteResponse!
  deleteManyPosts(input: DeleteManyPostsInput!): DeleteManyResponse!
}

input AddPostsToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [String!]!
}

input SetPostsOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [String!]!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUser!
}

input CreateUser {
  id: ID
  userName: String
  passWord: String
  firstName: String
  lastName: String
  created: DateTime
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUser!]!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateUser {
  id: ID
  userName: String
  passWord: String
  firstName: String
  lastName: String
  created: DateTime
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  or: [UserUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  or: [UserDeleteFilter!]
  id: IDFilterComparison
}

input SetOwnerOnPostInput {
  """The id of the record."""
  id: String!

  """The id of relation."""
  relationId: String!
}

input CreateOnePostInput {
  """The record to create"""
  post: CreatePost!
}

input CreatePost {
  id: String
  title: String
  body: String
}

input CreateManyPostsInput {
  """Array of records to create"""
  posts: [CreatePost!]!
}

input UpdateOnePostInput {
  """The id of the record to update"""
  id: String!

  """The update to apply."""
  update: UpdatePost!
}

input UpdatePost {
  id: String
  title: String
  body: String
}

input UpdateManyPostsInput {
  """Filter used to find fields to update"""
  filter: PostUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePost!
}

input PostUpdateFilter {
  and: [PostUpdateFilter!]
  or: [PostUpdateFilter!]
  id: StringFieldComparison
}

input DeleteOnePostInput {
  """The id of the record to delete."""
  id: String!
}

input DeleteManyPostsInput {
  """Filter to find records to delete"""
  filter: PostDeleteFilter!
}

input PostDeleteFilter {
  and: [PostDeleteFilter!]
  or: [PostDeleteFilter!]
  id: StringFieldComparison
}
